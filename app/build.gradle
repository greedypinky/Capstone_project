apply plugin: 'com.android.application'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("./keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        // keystore location is the relative path
        release {
            keyAlias 'capstonekey1'
            keyPassword 'testing'
            storeFile file('/Users/ritalaw/Documents/udacity/GitHub/Capstone_project/keystores')
            storePassword 'testing'
        }
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('/Users/ritalaw/.android/debug.keystore')
            storePassword 'android'
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.project.capstone_stage2"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // configure your app for multidex otherwise there will be error during compilation
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true


    }
    packagingOptions {
        //exclude 'LICENSE.txt'
        exclude "META-INF/com.android.support_support-vector-drawable.version"
        exclude "META-INF/com.android.support_support-v4.version"
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    // Encapsulates options for running tests.
    testOptions {
        // Changes the directory where Gradle saves test reports. By default, Gradle saves test reports
        // in the path_to_your_project/module_name/build/outputs/reports/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        reportDir "$rootDir/test-reports"
        // Changes the directory where Gradle saves test results. By default, Gradle saves test results
        // in the path_to_your_project/module_name/build/outputs/test-results/ directory.
        // '$rootDir' sets the path relative to the root directory of the current project.
        resultsDir "$rootDir/test-results"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // https://developers.google.com/api-client-library/java/
    implementation "com.android.support:support-v4:${rootProject.supportLibVersion}"
    // for google cloud endpoint api client
    implementation('com.google.api-client:google-api-client:1.22.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation 'com.google.http-client:google-http-client-android:1.22.0' exclude module: 'httpclient'
    // job dispatcher
    implementation 'com.firebase:firebase-jobdispatcher:0.5.0'
    // use 3rd party library in this app
    // picasso
    // exoPlayer
    // compile 'com.google.android.exoplayer:exoplayer:r2.6.0'
    // compile 'com.google.android.gms:play-services-ads:11.0.8'
    //compile 'com.google.android.gms:play-services-ads:9.0.2'
    implementation 'com.google.android.gms:play-services-ads:10.2.4'
    implementation 'com.google.android.gms:play-services-analytics:10.2.4'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.google.android.exoplayer:exoplayer:r2.2.0'
    implementation "com.android.support:recyclerview-v7:${rootProject.supportLibVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.supportLibVersion}"
    implementation "com.android.support:preference-v7:${rootProject.supportLibVersion}"
    implementation 'com.google.code.findbugs:jsr305:2.0.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation "com.android.support:appcompat-v7:${rootProject.supportLibVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:design:${rootProject.supportLibVersion}"
    testImplementation 'junit:junit:4.12'
    // Dependency for the Android Cloud EndPoint project
    compile project(path: ':capstone_backend', configuration: 'android-endpoints')
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
    // AndroidJUnitRunner and JUnit Rules
    // Optional -- Hamcrest library
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile 'com.android.support.test:rules:1.0.1'
    testCompile 'junit:junit:4.12'
}

task startAppEngine(dependsOn: ":backend:appengineRun") {

    project(":capstone_backend").afterEvaluate { backend ->
        backend.extensions.appengine.daemon = true
    }
    doLast {
        println "start the appengine in daemon mode!"
    }

}

